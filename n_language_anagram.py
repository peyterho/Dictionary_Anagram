# -*- coding: utf-8 -*-
"""N-language anagram.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11prLQpE2vm-74FxQLFVQBfQBbQ-1_xCU

# So you want to solve an anagram in any language

An [anagram](https://en.wikipedia.org/wiki/Anagram) is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.
Recently, you may have come across contest in which you are tasked to create 'as many anagrams as possible' from a given phrase.
This notebook shows you how you can solve this by using a brute-force dictionary lookup using Python, using the Malay language as an example.

## Acquiring the dictionary of Malay words and loading necessary libraries

What was my motivation for writing a Malay language anagram solver? Anagram solvers for English are [plentiful](https://thepygrammer.blogspot.com/2021/04/simple-anagram-solver.html), and coding an anagram solver is actually mentioned as a possible programming [interview](https://web.stanford.edu/class/cs9/sample_probs/Anagrams.pdf) question. I also wanted to create an anagram solver that was extensible to any langangue so long as the list of words is present in a dictionary that was encoded appropriately (UTF-8 for the most part).
The first step in solving a Malay language anagram is to acquire a Malay language list of words (a dictionary here is a misnomer as we just need a list of words and not's it's meaning or grammatical functions). There were two resources which I considered:
1. Husein Zolkepli's [list](https://raw.githubusercontent.com/huseinzol05/malay-dataset/master/dictionary/malay-text.txt) of Malay words
2. Open office's Malay language [dictionary](https://extensions.openoffice.org/en/project/kamus-bahasa-malaysia-malay-dictionary)
I chose option 1 as it was cleaner , with no grammatical taggings. Option 2 required regex processing (maybe this [one](https://stackoverflow.com/questions/14462407/remove-everything-after-last-backslash)  which can be done either using notepad++ or programatically).
Once you have acquired the word list in a text file we can start coding!

## Coding stuff starts here

The codeblock#1 is to load the required libraries. As I was modifying existing code in a hurry I can't remember which ones are absolutely essential :D
"""

#An example to create an anagram solver in Malay
#Modified from https://medium.com/python-anagram-solver/python-anagram-solver-edb2646b65f8
#Malay words from https://raw.githubusercontent.com/huseinzol05/malay-dataset/master/dictionary/malay-text.txt
#Codeblock1
from collections import Counter
import sys
import time
import requests
import urllib
import io

"""Next, you can use the tried and tested method of loading the code into Colab...
Choose the text file which you have downloaded and load it accordingly. Code is shown in Codeblock#2
"""

#upload dictionary file
# it's possible to use wget to download from the URL
#Codeblock2
from google.colab import files
uploaded = files.upload()

"""The next block of code (Codeblock#3) shows how the text file can be read into Python. The text is read into a dictionary object (which has key-value pairs)"""

#Codeblock3
#Rerun the code from this block onwards if you are making changes or experimenting
with open('malaytext.txt', 'r') as f:
    dictionary = f.read()

"""Once the file has been read, you can assign it to a dictionary variable by converting all words into lowercase. Then, do a sanity check by counting how many words you have in your list, this is done in Codeblock#4"""

#Codeblock4
#convert every word in the dictionary to lower case and print the number of words 
#in the dictionary

dictionary = [x.lower() for x in dictionary.split('\n')]
print(len(dictionary))

"""In Codeblock#5, we assign the phrase of interest (the phrase that we want to convert into anagrams) to the variable named **letters**. This is the part of code that you can convert to enter other phrase of interest. My code does not check for the presence of non-characters, that's something you can do for improvement! The variable lettes will be converted in lowercase, and the *Counter* function will count how many of each character is found in the phrase that you have assigned to the variable **letters**."""

#Codeblock#6
#Letters is the variable to hold the phrase to be turned into an anagram
letters = 'malaysiaprihatin'
letters = letters.lower() #convert the characters in letters to lowercase
letters_count = Counter(letters) #count the number of each character in letter
print(letters_count)

"""Here comes the code that does the heavy lifting!<br> 
Step 1:  We create an empty set. Remember set() does not allow duplicated values. <br>
Step 2: We take each word, one after another, in the dictionary (this is called 'iterate').<br>
Step 3: We check if all the letters in the word are also contained in the given scrambled letters input. It actually returns an empty set() if all the letters in the dictionary ‘word’ are in the scrambled string ‘letters’. If not then it returns a set containing the letters in the dictionary word that are not contained in the given scramble input ‘letters’. <br>
Step 4: Next we initialise another empy set ‘check_word’.  <br>
Step 5: Now we iterate over key , value in the Counter dictionary type of ‘word’ and check if the count of those elements are less than or equal to the count of the same elements in the scrambled letter input. If they are we add that to the ‘check_word’ set.<br>
Step 6: We check if the ‘check_word’ set is exactly equal to the ‘word’ set. If they are equal we add that word to the ‘anagram’ set.<br>
"""

#Codeblock#7
anagrams = set()
for word in dictionary:
        # Check if all the unique letters in word are in the
        # scrambled letters
    if not set(word) - set(letters):
          check_word = set()
            # Check if the count of each letter is less than or equal
            # to the count of that letter in scrambled letter input
          for k, v in Counter(word).items():
              if v <= letters_count[k]:
                    check_word.add(k)
              if check_word == set(word):
                anagrams.add(word)      
            # Check if check_words is exactly equal to the unique letters
            # in the word of dictionary

"""Now, we can view the  sorted list of anagrams using a *lambda function*  in Codeblock#8."""

#Codeblock#8
sorted(list(anagrams), key=lambda x: len(x))

"""To conclude , you can print out the length of the anagrams object to find out how many anagrams can be created from a given phrase (Codeblock#9)!"""

#Codeblock#9
print(len(anagrams))

"""# Final thoughts
And there you go, a simple anagram solver using a dictionary look up.
The code was inspired and modified from R.Gurung's [Medium](https://medium.com/python-anagram-solver/python-anagram-solver-edb2646b65f8) post, so do hop over there to see how this may be done as a command line Python script instead of a colab script.
If you're looking to improve this code, here are some simple ideas
1. Do error checking to check for numeric and special symbols in the phrase assigned to the letters object.
2. Figure out how to segment the anagrams end result to print out anagrams of *n-character* length and above
3. Replace the Malay language list of words to your favorite lesser served language word list (encoded in UTF-8 please) - here the open office dictionary might be helpful
"""